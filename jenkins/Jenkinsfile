// Jenkinsfile for the 'development' branch workflow
@Library('my-project-library') _

pipeline {
    agent {
        kubernetes {
            yaml """
apiVersion: v1
kind: Pod
spec:
  imagePullSecrets:
  - name: dockerhub-secret
  containers:
  - name: node
    image: node:24-alpine
    command: ["cat"]
    tty: true
  - name: kaniko
    image: gcr.io/kaniko-project/executor:v1.11.0-debug
    command: ["/bin/sh", "-c", "cat"]
    tty: true
    volumeMounts:
    - name: docker-config
      mountPath: /kaniko/.docker
  - name: trivy
    image: aquasec/trivy:latest
    command: ["cat"]
    tty: true
  - name: snyk
    image: snyk/snyk:docker
    command: ["cat"]
    tty: true
  volumes:
  - name: docker-config
    secret:
      secretName: dockerhub-secret
      items:
      - key: .dockerconfigjson
        path: config.json
"""
        }
    }

    environment {
        DOCKER_REPO = "zizoo1566/my-node-app"
        GIT_REPO_URL = "github.com/ztr1566/k8s-node-project.git"
    }

    stages {
        stage('Build, Test, and Scan') {
            // This pipeline only runs on the 'development' branch
            when { branch 'development' }
            
            steps {
                script {
                    // Generate a unique image tag
                    def imageTag = "dev-${env.GIT_COMMIT.take(7)}-${env.BUILD_NUMBER}"
                    env.FULL_IMAGE_NAME = "${env.DOCKER_REPO}:${imageTag}"
                    echo "Building image: ${env.FULL_IMAGE_NAME}"

                    // Run security scans
                    container('snyk') {
                        withCredentials([string(credentialsId: 'snyk-token', variable: 'SNYK_TOKEN')]) {
                            dir('app') {
                                sh "snyk test --severity-threshold=high"
                                sh "snyk code test --severity-threshold=high"
                            }
                        }
                    }

                    // Run lint and tests
                    runTests(appDir: 'app')

                    // Build and push the Docker image
                    env.DIGEST_FILE_NAME = buildAndPush(
                        imageName: env.FULL_IMAGE_NAME,
                        dockerfile: 'app/Dockerfile',
                        context: 'dir://app'
                    )

                    // Scan the pushed image
                    container('trivy') {
                        def imageDigest = readFile(env.DIGEST_FILE_NAME).trim()
                        def repositoryUri = env.FULL_IMAGE_NAME.tokenize(':')[0]
                        def imageWithDigest = "${repositoryUri}@${imageDigest}"
                        echo "Scanning image with Trivy: ${imageWithDigest}"
                        sh "trivy image --exit-code 1 --severity HIGH,CRITICAL --scanners vuln ${imageWithDigest}"
                    }
                }
            }
        }

        stage('Update Manifest and Push to Master') {
            when { branch 'development' }

            steps {
                container('node') { // Using a container with git
                    withCredentials([usernamePassword(credentialsId: 'github-pat', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_TOKEN')]) {
                        sh """
                            # Configure Git user
                            git config --global user.name "Jenkins Bot"
                            git config --global user.email "ci-bot@example.com"
                            
                            # Set up remote URL with credentials for push
                            git remote set-url origin https://${GIT_USER}:${GIT_TOKEN}@${env.GIT_REPO_URL}

                            # Fetch all branches from remote and switch to master
                            git fetch origin
                            git checkout master
                            
                            # Merge changes from the development branch into master
                            echo "Merging changes from origin/development into master..."
                            git merge origin/development --no-ff -m "Merge branch 'development' [ci skip]"

                            # Update the deployment manifest with the new image
                            echo "Updating manifest with image: ${env.FULL_IMAGE_NAME}"
                            sed -i 's|image: .*|image: ${env.FULL_IMAGE_NAME}|g' kubernetes/manifests/nodejs-app/deployment.yaml
                            
                            # Add the manifest change to the commit
                            git add kubernetes/manifests/nodejs-app/deployment.yaml
                            # Amend the previous merge commit to include this change
                            git commit --amend --no-edit
                            
                            # Push the merge and the manifest update to master
                            echo "Pushing final changes to master..."
                            git push origin master
                        """
                    }
                }
            }
        }
    }
}