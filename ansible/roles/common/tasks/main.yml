# tasks file for common role (Definitive Final Version - All Fixes Included)
- name: 1. Ensure hostname is resolvable
  lineinfile:
    path: /etc/hosts
    regexp: '^127\.0\.1\.1'
    line: "127.0.1.1 {{ ansible_hostname }}"
    state: present

- name: 2. CLEANUP | Remove old docker repo file if it exists
  file:
    path: /etc/apt/sources.list.d/docker.list
    state: absent

- name: 3. CLEANUP | Remove old docker GPG key if it exists
  file:
    path: /usr/share/keyrings/docker-archive-keyring.gpg
    state: absent

- name: 4. Disable swap
  command: swapoff -a
  when: ansible_swaptotal_mb > 0

- name: 5. Comment out swap in /etc/fstab to disable permanently
  replace:
    path: /etc/fstab
    regexp: '^(\s*[^#\s]+\s+)(\S+\s+)(swap\s+.*)$'
    replace: '#\1\2\3'

- name: 6. Load required kernel modules
  modprobe:
    name: "{{ item }}"
    state: present
  loop:
    - overlay
    - br_netfilter

- name: 7. Ensure kernel modules are loaded on boot
  copy:
    dest: /etc/modules-load.d/k8s.conf
    content: |
      overlay
      br_netfilter

- name: 8. Set required sysctl params for kubernetes networking
  sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    sysctl_set: true
    state: present
    reload: true
  loop:
    - { key: "net.bridge.bridge-nf-call-iptables", value: "1" }
    - { key: "net.ipv4.ip_forward", value: "1" }
    - { key: "net.bridge.bridge-nf-call-ip6tables", value: "1" }

- name: 9. Install dependencies
  apt:
    name:
      - ca-certificates
      - curl
      - gnupg
    state: present
    update_cache: true

- name: 10. Create directory for apt keyrings
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: "0755"

- name: 11. CLEANUP | Forcefully remove existing docker.gpg key to ensure recreation
  file:
    path: /etc/apt/keyrings/docker.gpg
    state: absent

- name: 12. Add Docker's official GPG key (in binary format)
  shell: |
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    chmod a+r /etc/apt/keyrings/docker.gpg
  args:
    creates: /etc/apt/keyrings/docker.gpg

- name: 13. Add Docker apt repository (with correct codename)
  apt_repository:
    repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu jammy stable"
    state: present
    filename: docker

- name: 14. Install containerd
  apt:
    name: containerd.io
    state: present
    update_cache: true

# --- NEW TASK 1 ---
# Install the complete Docker Engine package suite.
# This goes after containerd, as the Docker repo is already configured.
- name: 14a. Install Docker Engine packages
  apt:
    name:
      - docker-ce
      - docker-ce-cli
      - docker-buildx-plugin
    state: present
    update_cache: true

# --- NEW TASK 2 ---
# Add the user running the playbook to the 'docker' group.
# This allows running docker commands without sudo.
- name: 14b. Add user to the 'docker' group
  user:
    name: "{{ ansible_user }}"
    groups: docker
    append: yes

- name: 14c. Ensure /etc/containerd directory exists
  file:
    path: /etc/containerd
    state: directory
    mode: "0755"

- name: 15. Configure containerd and enable CRI plugin
  shell: |
    containerd config default > /etc/containerd/config.toml
    sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
    sed -i 's/disabled_plugins = \["cri"\]/disabled_plugins = \[\]/' /etc/containerd/config.toml
  args:
    executable: /bin/bash

- name: 16. Restart and enable containerd service
  systemd:
    name: containerd
    state: restarted
    enabled: true
    daemon_reload: true

# --- NEW TASK 3 ---
# Ensure the Docker service is running and enabled on boot, just like containerd.
- name: 16a. Start and enable Docker service
  systemd:
    name: docker
    state: started
    enabled: true

- name: 17. CLEANUP | Forcefully remove existing k8s repo and key files
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    - /etc/apt/sources.list.d/kubernetes.list

- name: 18. Add Kubernetes's official GPG key (in binary format)
  shell: |
    curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  args:
    creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

- name: 19. Add Kubernetes apt repository (new official repo)
  apt_repository:
    repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /"
    state: present
    filename: kubernetes

- name: 20. Install Kubernetes packages
  apt:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: present

- name: 21. Hold Kubernetes packages from being auto-updated
  command: apt-mark hold {{ item }}
  loop:
    - kubelet
    - kubeadm
    - kubectl
  register: apt_mark_result
  changed_when: "'set on hold' in apt_mark_result.stdout"

- include_tasks: firewall.yml
